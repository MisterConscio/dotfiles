""""""""""""""""
"    Basics    "
""""""""""""""""
set encoding=utf-8
set fileencoding=utf-8
set nocompatible
filetype on
filetype plugin on
filetype indent on
syntax on
set number
set cursorline
set nobackup
set t_Co=256
set background=dark
set viminfo=%,<800,'10,/50,:100,h,f0,n~/.cache/viminfo

"""""""""""""""
"   Editing   "
"""""""""""""""
set shiftwidth=2
set tabstop=2
set expandtab
set nobackup
set scrolloff=10
set nowrap
set incsearch
set smartcase
set showmatch
set hlsearch
set history=1000
set autoindent
set smartindent
set splitbelow splitright

""""""""""""""
"    Menu    "
""""""""""""""
set path+=**
set wildmenu
"set wildmode=longest:full,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

"""""""""""""""""""""
"    File Browse    "
"""""""""""""""""""""

let g:netrw_banner=0
let g:netrw_altv=1
let g:netrw_liststyle=3

"""""""""""""""""
"    Plugins    "
"""""""""""""""""
call plug#begin('~/.vim/plugged')

  Plug 'mattn/emmet-vim'
  Plug 'joshdick/onedark.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'sheerun/vim-polyglot'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'vimwiki/vimwiki'
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }

call plug#end()

colorscheme onedark

"""""""""""""""""
"    Keybind    "
"""""""""""""""""
" Leader key
let mapleader = " "

" Buffer Switching
nnoremap <C-h> :bp<CR>
nnoremap <C-l> :bn<CR>

" Emmet plugin
let g:user_emmet_mode='n'
let g:user_emmet_leader_key=','
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Vimwiki plugin
let g:vimwiki_list = [{'path': '~/docx/notes/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_ext2syntax = {'.md': 'markdown',
                      \ '.mkd': 'markdown'}

" MakrdownPreview plugin
let g:mkdp_theme = 'light'
nmap <leader>mdp <Plug>MarkdownPreview
nmap <leader>mds <Plug>MarkdownPreviewStop

""""""""""""""""""""
"    Vimscript    "
"""""""""""""""""""

" Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Deletes all white spaces on save
autocmd BufWritePre * %s/\s\+$//e

"""""""""""""""""""""
"    Status Line    "
"""""""""""""""""""""

set laststatus=2
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ }

" The end
